<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables
move_speed = 3;
//phy_fixed_rotation = true;
image_speed = 0;

state = 'move';
last_dir = 'down';
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement

// input
var left = keyboard_check(vk_left);
var right = keyboard_check(vk_right);
var down = keyboard_check(vk_down);
var up = keyboard_check(vk_up);
var attack = keyboard_check_pressed(vk_space);

if(attack) {
    state = 'attack';
}

if(state == 'move') {

    // direction
    var xaxis = right - left;
    var yaxis = down - up;
    var dir = point_direction(0,0,xaxis,yaxis);
    
    //length
    var len = 0;
    if(xaxis == 0 and yaxis == 0) {
        len = 0;
    } else {
        len = move_speed;
    }
    
    //speeds
    var vspd = lengthdir_y(len, dir)
    var hspd = lengthdir_x(len, dir);
    
    //collision
    if( place_meeting(x, y+vspd, obj_wall) ) {
        
        while (!place_meeting(x,y+sign(vspd), obj_wall)) {
            y+= sign(vspd);
        }
        vspd = 0;
    }
    if( place_meeting(x+hspd, y, obj_wall) ) {
        while (!place_meeting(x+sign(hspd),y, obj_wall)) {
            x+= sign(hspd);
        }
        hspd = 0;
    }
    
    //move
    x += hspd;
    y += vspd;
    
    //move sprite if moving, else reset to first
    image_speed = sign(len)*.2;
    if (len == 0) image_index = 0;
    
    //virtical sprites
    if(vspd &gt; 0) {
        sprite_index = spr_player_down;
        last_dir = 'down';
    } else if (vspd &lt; 0) {
        sprite_index = spr_player_up;
        last_dir = 'up';
    }
    
    //horizontal sprites
    if(hspd &gt; 0) {
        sprite_index = spr_player_right;
        last_dir = 'right';
    } else if (hspd &lt; 0) {
        sprite_index = spr_player_left;
        last_dir = 'left';
    }
} else if (state == 'attack') {
    image_speed = .3;
    if(last_dir == 'down') {
        sprite_index = spr_player_attack_down;
    } else if(last_dir == 'up') {
        sprite_index = spr_player_attack_up;
    } else if(last_dir == 'right') {
        sprite_index = spr_player_attack_right;
    } else if(last_dir == 'left') {
        sprite_index = spr_player_attack_left;
    }
    if(image_index &gt;= image_number-1) {
        state = 'move';
        if(last_dir == 'down') {
            sprite_index = spr_player_down;
        } else if(last_dir == 'up') {
            sprite_index = spr_player_up;
        } else if(last_dir == 'right') {
            sprite_index = spr_player_right;
        } else if(last_dir == 'left') {
            sprite_index = spr_player_left;
        }
    }
    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///change rooms
if(x &gt;= view_xview[0] + view_wview[0]) {
    view_xview[0] += view_wview[0]
}
if(x &lt;= view_xview[0]) {
    view_xview[0] -= view_wview[0]
}

if(y &gt;= view_yview[0] + view_hview[0]) {
    view_yview[0] += view_hview[0]
}
if(y &lt;= view_yview[0]) {
    view_yview[0] -= view_hview[0]
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// collide
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
